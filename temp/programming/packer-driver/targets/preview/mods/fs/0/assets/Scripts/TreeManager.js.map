{"version":3,"sources":["file:///D:/Cocos/Projects/TreeChopper/assets/Scripts/TreeManager.ts"],"names":["_decorator","Component","Prefab","instantiate","RigidBody2D","Vec2","UITransform","GameController","SoundManager","ccclass","property","TreeType","TreeManager","type","onLoad","populateStartingTrees","update","deltaTime","treeArray","position","y","treeHeight","setPosition","dropSpeed","i","length","timeSinceLastChop","chopTree","playerMovement","node","scale","x","name","knockAway","Instance","lose","score","playWoodChopSound","timer","maxTime","lastPosition","addScore","choppedTree","shift","getComponent","linearVelocity","scheduleOnce","ZERO","active","addRandomTree","knockDown","pool_Tree","push","treePrefab","setParent","pool_TreeWithStick","treeWithStickPrefab","getChildByName","height","findActiveTree","Tree","tree","Math","random","TreeWithStick","setScale","treeType","j"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, Vec3, RigidBody2D, Vec2, game, director, UITransform, clamp } from 'cc';\nimport { GameController } from './GameController';\r\nimport { PlayerMovement } from './PlayerMovement';\r\nimport { SoundManager } from './SoundManager';\r\nconst { ccclass, property } = _decorator;\n\n/**\n * Predefined variables\n * Name = TreeManager\n * DateTime = Thu Feb 10 2022 23:14:06 GMT+0700 (Indochina Time)\n * Author = briezar\n * FileBasename = TreeManager.ts\n * FileBasenameNoExtension = TreeManager\n * URL = db://assets/TreeManager.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\n *\n */\nenum TreeType { Tree, TreeWithStick }\n\n@ccclass('TreeManager')\nexport class TreeManager extends Component {\n    @property({ type: Prefab })\n    public treePrefab: Prefab;\n\n    @property({ type: Prefab })\n    public treeWithStickPrefab: Prefab;\n\n    playerMovement: PlayerMovement;\n\n    treeArray: Node[] = [];\n\n    treeHeight: number;\n    dropSpeed: number = 1000;\n\n    pool_Tree: Node[] = [];\n    pool_TreeWithStick: Node[] = [];\n\n    lastPosition: number = -1;\n    timeSinceLastChop: number = 0;\n\n    onLoad() {\n        this.populateStartingTrees();\n    }\n\n    update(deltaTime: number) {\n\n        //Move to position when chop fast\n        if (this.treeArray[0].position.y > this.treeHeight) {\r\n            this.treeArray[0].setPosition(0, this.treeHeight, 0);\r\n        }\n\n        //Move first block\n        if (this.treeArray[0].position.y > 0.01) {\r\n            this.treeArray[0].setPosition(0, this.treeArray[0].position.y - this.dropSpeed * deltaTime, 0);\r\n        }\n        else if (this.treeArray[0].position.y < 0.01) {\n            this.treeArray[0].setPosition(0, 0, 0);\n        }\n\n        //Next block sticks to previous block\n        for (var i = 1; i < this.treeArray.length; i++) {\r\n            this.treeArray[i].setPosition(0, this.treeArray[i - 1].position.y + this.treeHeight, 0);\r\n        }\n\n        this.timeSinceLastChop += deltaTime;\n    }\n\n    chopTree() {\n        if (this.playerMovement.node.scale.x == this.treeArray[0].scale.x && this.treeArray[0].name == \"TreeWithStick\") {\r\n            this.playerMovement.knockAway();\r\n            GameController.Instance.lose();\r\n            return;\r\n        }\n        let score: number = 10;\r\n        SoundManager.Instance.playWoodChopSound();\n\n        GameController.Instance.timer += 0.5;\n        if (GameController.Instance.timer > GameController.Instance.maxTime) GameController.Instance.timer = GameController.Instance.maxTime;\n\n        let position = this.playerMovement.node.scale.x;\n        if (position != this.lastPosition) {\r\n            score += 2;\r\n            if (this.timeSinceLastChop < 0.5) {\r\n                score += 3;\r\n            }\r\n        }\n        if (this.timeSinceLastChop < 0.2) score += 5;\n\n        GameController.Instance.addScore(score);\n\n        var choppedTree = this.treeArray.shift();\r\n        choppedTree.getComponent(RigidBody2D).linearVelocity = new Vec2(this.playerMovement.node.scale.x * -100, 0);\r\n        this.scheduleOnce(() => {\r\n            choppedTree.getComponent(RigidBody2D).linearVelocity = Vec2.ZERO;\r\n            choppedTree.active = false;\r\n        }, 1);\r\n        this.addRandomTree();\r\n        this.lastPosition = this.playerMovement.node.scale.x;\r\n        this.timeSinceLastChop = 0;\r\n\r\n        if (this.playerMovement.node.scale.x == this.treeArray[0].scale.x && this.treeArray[0].name == \"TreeWithStick\") {\r\n            this.playerMovement.knockDown();\r\n            GameController.Instance.lose();\r\n        }\r\n    }\n\n    populateStartingTrees() {\n        for (var i = 0; i < 20; i++) {\r\n            this.pool_Tree.push(instantiate(this.treePrefab));\r\n            this.pool_Tree[i].active = false;\r\n            this.pool_Tree[i].setParent(this.node);\r\n\r\n            this.pool_TreeWithStick.push(instantiate(this.treeWithStickPrefab));\r\n            this.pool_TreeWithStick[i].active = false;\r\n            this.pool_TreeWithStick[i].setParent(this.node);\r\n        }\n\n        this.treeArray[0] = this.node.getChildByName(\"Tree\");\n        this.treeHeight = this.treeArray[0].getComponent(UITransform).height;\n\n        this.treeArray[1] = this.findActiveTree(TreeType.Tree);\r\n        this.treeArray[1].setPosition(0, this.treeHeight * this.treeArray.length, 0);\n\n        for (var i = 2; i < 10; i++) {\r\n            this.addRandomTree();\r\n        }\r\n\r\n    }\n\n    addRandomTree() {\n        var tree;\n        if (this.treeArray[this.treeArray.length - 1].name == \"TreeWithStick\") {\r\n            tree = this.findActiveTree(TreeType.Tree);\r\n        }\n        else {\n            if (Math.random() > 0.5) {\r\n                tree = this.findActiveTree(TreeType.Tree);\r\n            }\r\n            else {\r\n                tree = this.findActiveTree(TreeType.TreeWithStick);\r\n\r\n                if (Math.random() > 0.5) tree.setScale(-1, 1, 1); //flip\r\n                else tree.setScale(1, 1, 1);\r\n            }\r\n        }\r\n        tree.setPosition(0, this.treeHeight * this.treeArray.length, 0);\r\n        this.treeArray.push(tree);\r\n    }\n\n    findActiveTree(treeType: TreeType): Node {\n        if (treeType == TreeType.Tree) {\r\n            for (var i = 0; i < this.pool_Tree.length; i++) {\r\n                if (!this.pool_Tree[i].active) { this.pool_Tree[i].active = true; return this.pool_Tree[i];}\r\n            }\r\n            for (var j = 0; j < this.pool_TreeWithStick.length; j++) {\r\n                if (!this.pool_TreeWithStick[j].active) { this.pool_TreeWithStick[i].active = true; return this.pool_TreeWithStick[j]; }\r\n            }\r\n        }\n\n        else if (treeType == TreeType.TreeWithStick) {\r\n            for (var i = 0; i < this.pool_TreeWithStick.length; i++) {\r\n                if (!this.pool_TreeWithStick[i].active) { this.pool_TreeWithStick[i].active = true; return this.pool_TreeWithStick[i]; }\r\n            }\r\n            for (var j = 0; j < this.pool_Tree.length; j++) {\r\n                if (!this.pool_Tree[j].active) { this.pool_Tree[i].active = true; return this.pool_Tree[j]; }\r\n            }\r\n        }\n\n        return null;\r\n    }\n}\n\n/**\n * [1] Class member could be defined like this.\n * [2] Use `property` decorator if your want the member to be serializable.\n * [3] Your initialization goes here.\n * [4] Your update function goes here.\n *\n * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/\n * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html\n */\n"]}