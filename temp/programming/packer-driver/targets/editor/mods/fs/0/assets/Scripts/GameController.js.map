{"version":3,"sources":["file:///D:/Cocos/Projects/TreeChopper/assets/Scripts/GameController.ts"],"names":["_decorator","Component","Node","Vec2","ProgressBar","Label","sys","Prefab","resources","instantiate","randomRange","Color","FloatingNumber","PlayerMovement","ccclass","property","GameController","type","onLoad","Instance","load","err","prefab","i","pool_floatingScore","push","getComponent","node","active","setParent","parent","scoreLabel","getChildByName","localStorage","getItem","setItem","window","sessionStorage","string","score","parseInt","confirmResetBestScoreNode","timerBar","multiplierBar","multiplierLabel","getComponentInChildren","timer","maxTime","on","EventType","TOUCH_START","event","touchInput","getUILocation","isLost","isPaused","x","playerMovement","chopLeft","chopRight","setSiblingIndex","update","deltaTime","progress","Math","max","multiplierProgress","multiplier","toFixed","knockAway","lose","timerTimeScale","difficultyScale","multiplierTimeScale","toString","scheduleOnce","destroy","gameplay","addScore","actualScore","round","bestScore","floatingScore","findActiveFloatingScore","label","rigidBody2D","rigidBody","fontSize","color","WHITE","CYAN","YELLOW","applyForceToCenter","length","resetBestScore","confirmResetBestScore","increaseMultiplier","add","setAndRevertMultiplierTimeScale","timeScale","duration","setDifficultyScale","diff","addTimerTime","time","setTimerTimeScale","console","log","unschedule","resetTimerTimeScale"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Vec2, director, find, ProgressBar, game, Label, sys, Prefab, resources, instantiate, RigidBody2D, randomRange, RigidBody, Color, EPSILON, EventTouch } from 'cc';\nimport { FloatingNumber } from './FloatingNumber';\r\nimport { PlayerMovement } from './PlayerMovement';\nconst { ccclass, property } = _decorator;\n\n/**\n * Predefined variables\n * Name = GameController\n * DateTime = Mon Feb 14 2022 15:51:20 GMT+0700 (Indochina Time)\n * Author = briezar\n * FileBasename = GameController.ts\n * FileBasenameNoExtension = GameController\n * URL = db://assets/GameController.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\n *\n */\n\n@ccclass('GameController')\nexport class GameController extends Component {\n\n    public static Instance: GameController = null;\n\n    @property({ type: PlayerMovement }) public playerMovement: PlayerMovement;\n    @property({ type: Prefab }) public gameplay: Prefab;\n\n    timerBar: ProgressBar;\n    multiplierBar: ProgressBar;\n    multiplierLabel: Label;\n\n    multiplier: number = 1;\n    multiplierTimeScale: number = 1;\n    multiplierProgress: number = 0;\n\n    timer: number;\n    timerTimeScale: number = 1;\n    maxTime: number = 6;\n    difficultyScale: number = 1;\r\n\n    scoreLabel: Label;\n\n    touchInput: Vec2;\n    isLost: boolean = false;\n    isPaused: boolean = false;\n    score: number = 0;\n\n    pool_floatingScore: FloatingNumber[] = [];\n    confirmResetBestScoreNode: Node;\n\n    onLoad() {\n\n        GameController.Instance = this;\n\n        resources.load(\"FloatingNumber\", Prefab, (err, prefab) => {\n            for (var i = 0; i < 20; i++) {\n                this.pool_floatingScore.push(instantiate(prefab).getComponent(FloatingNumber));\n                let node = this.pool_floatingScore[i].node;\n                node.active = false;\n                node.setParent(this.node.parent);\n            }\n        });\n\n        this.scoreLabel = this.node.parent.getChildByName(\"Score\").getComponent(Label);\n        if (sys.localStorage.getItem('bestScore') == null) {\n            sys.localStorage.setItem('bestScore', '0');\n        }\n        window.sessionStorage.setItem('score', '0');\n        this.scoreLabel.string = \"Score: \" + this.score + \"\\nBest Score: \" + parseInt(sys.localStorage.getItem('bestScore'));\n\n        this.confirmResetBestScoreNode = this.node.parent.getChildByName(\"ConfimResetBestScore\");\n        this.timerBar = this.node.parent.getChildByName(\"Timer\").getComponent(ProgressBar);\n        this.multiplierBar = this.node.parent.getChildByName(\"Multiplier\").getComponent(ProgressBar);\n        this.multiplierLabel = this.multiplierBar.getComponentInChildren(Label);\n        this.timer = this.maxTime;\n\n        this.node.on(Node.EventType.TOUCH_START, (event: EventTouch) => {\n            this.touchInput = event.getUILocation();\n\n            if (this.isLost || this.isPaused) return;\n\n            if (this.touchInput.x < 1080 / 2) {\n                this.playerMovement.chopLeft();\n            }\n            else {\n                this.playerMovement.chopRight();\n            }\n        }, this);\n\n        this.isPaused = true;\n\n        this.node.parent.setSiblingIndex(3);\n\n    }\n\n    update(deltaTime: number) {\n        if (this.isPaused) return;\n\n        this.timerBar.progress = Math.max(0.3, 0.3 + (this.timer / this.maxTime) * 0.7);\n        this.multiplierBar.progress = Math.max(0.3, 0.3 + this.multiplierProgress * 0.7);\r\n\r\n        this.multiplierLabel.string = this.multiplier.toFixed(1) + \"x\";\n\n        if (this.timer <= 0 && !this.isLost) {\n            this.playerMovement.knockAway();\n            this.lose();\n        }\n        else {\n            this.timer -= deltaTime * this.timerTimeScale * this.difficultyScale;\n\n            if (this.multiplierProgress > 0) {\r\n                this.multiplierProgress -= deltaTime * 0.3 * this.multiplier * this.multiplierTimeScale;\n            }\r\n            else {\r\n                if (this.multiplier >= 1.1) {\r\n                    this.multiplierProgress = 1;\r\n                    this.multiplier -= 0.1;\n                }\r\n            }\r\n        }\n    }\n\n\n    lose() {\n        this.isLost = true;\n        if (this.score > parseInt(sys.localStorage.getItem('bestScore'))) {\n            this.scoreLabel.string = \"Score: \" + this.score + \"\\nBest Score: \" + this.score;\n            sys.localStorage.setItem('bestScore', this.score.toString());\n        }\n\n        this.scheduleOnce(() => {\n            this.node.parent.destroy();\n            instantiate(this.gameplay).setParent(this.node.parent.parent);\n        }, 2);\n    }\n\n    addScore(score: number) {\n        let actualScore = Math.round(score * this.multiplier);\n        this.score += actualScore;\n        let bestScore = parseInt(sys.localStorage.getItem('bestScore'));\n        this.scoreLabel.string = \"Score: \" + this.score + \"\\nBest Score: \" + (this.score > bestScore ? this.score : bestScore);\n\n        let floatingScore = this.findActiveFloatingScore();\n        let label = floatingScore.label;\n        let rigidBody2D = floatingScore.rigidBody;\n\n        label.string = \"+\" + actualScore.toFixed();\n        label.fontSize = 50 + score * 3;\n        if (score < 15) {\r\n            label.color = Color.WHITE;\r\n        }\n        else if (score < 20) {\n            label.color = Color.CYAN;\r\n        }\n        else {\n            label.color = Color.YELLOW;\r\n        }\n        rigidBody2D.applyForceToCenter(new Vec2(randomRange(-1, 1) * 500, randomRange(2000, 2500)), true);\n    }\n\n    findActiveFloatingScore(): FloatingNumber {\n        for (var i = 0; i < this.pool_floatingScore.length; i++) {\n            if (!this.pool_floatingScore[i].node.active) { this.pool_floatingScore[i].node.active = true; return this.pool_floatingScore[i]; }\n        }\n    }\n\n    resetBestScore() {\n        sys.localStorage.setItem('bestScore', '0');\n        this.scoreLabel.string = \"Score: \" + this.score + \"\\nBest Score: 0\";\n    }\n\n    confirmResetBestScore() {\n        this.confirmResetBestScoreNode.active = !this.confirmResetBestScoreNode.active;\r\n        this.isPaused = this.confirmResetBestScoreNode.active;\r\n    }\n\n    increaseMultiplier(add: number) {\r\n        this.multiplierProgress += add;\r\n        if (this.multiplierProgress >= 1) {\r\n            this.multiplierProgress = 0.01;\n            this.multiplier += 0.1;\n            this.setAndRevertMultiplierTimeScale(0, 0.4);\n        };\r\n    }\n\n    setAndRevertMultiplierTimeScale(timeScale: number, duration: number) {\n        this.multiplierTimeScale = timeScale;\r\n        this.scheduleOnce(() => {\r\n            this.multiplierTimeScale = 1;\r\n        }, duration);\r\n    }\n\n    setDifficultyScale(diff: number) {\n        this.difficultyScale = diff;\r\n    }\n\n    addTimerTime(time: number) {\n        this.timer += time;\n        if (this.timer > this.maxTime) this.timer = this.maxTime;\n\r\n    }\n\n    setTimerTimeScale(timeScale: number, duration: number) {\n        console.log(\"Set time scale = \" + timeScale + \" for \" + duration + \" seconds\");\n        this.unschedule(this.resetTimerTimeScale);\n        this.timerTimeScale = timeScale;\r\n        this.scheduleOnce(this.resetTimerTimeScale, duration);\n    }\n\n    resetTimerTimeScale() {\n        this.timerTimeScale = 1;\r\n    }\n}\n\n/**\n * [1] Class member could be defined like this.\n * [2] Use `property` decorator if your want the member to be serializable.\n * [3] Your initialization goes here.\n * [4] Your update function goes here.\n *\n * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/\n * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html\n */\n"]}