{"version":3,"sources":["file:///D:/Cocos/Projects/TreeChopper/assets/Scripts/GameController.ts"],"names":["_decorator","Component","Node","Vec2","director","find","ProgressBar","Label","sys","Prefab","resources","instantiate","RigidBody2D","randomRange","PlayerMovement","ccclass","property","GameController","type","onLoad","Instance","load","err","prefab","floatingNumber","i","pool_floatingScore","push","active","setParent","node","parent","scoreLabel","getComponent","localStorage","getItem","setItem","window","sessionStorage","string","score","parseInt","timerBar","timer","maxTime","on","EventType","TOUCH_START","event","touchInput","getUILocation","isLost","isPaused","x","playerMovement","chopLeft","chopRight","scheduleOnce","lose","toString","loadScene","addScore","bestScore","floatingScore","findActiveFloatingScore","label","rigidBody2D","setPosition","fontSize","applyForceToCenter","linearVelocity","ZERO","length","resetBestScore","update","deltaTime","progress","knockAway"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Vec2, director, find, ProgressBar, game, Label, sys, Prefab, resources, instantiate, RigidBody2D, randomRange, RigidBody, Color } from 'cc';\nimport { PlayerMovement } from './PlayerMovement';\r\nconst { ccclass, property } = _decorator;\n\n/**\n * Predefined variables\n * Name = GameController\n * DateTime = Mon Feb 14 2022 15:51:20 GMT+0700 (Indochina Time)\n * Author = briezar\n * FileBasename = GameController.ts\n * FileBasenameNoExtension = GameController\n * URL = db://assets/GameController.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\n *\n */\n\n@ccclass('GameController')\nexport class GameController extends Component {\n\n    public static Instance: GameController = null;\n\n    @property({ type: PlayerMovement })\n    public playerMovement: PlayerMovement;\n\n    timerBar: ProgressBar;\n    timer: number;\n    maxTime: number = 6;\n\n    scoreLabel: Label;\n    floatingNumber: Prefab;\n\n    touchInput: Vec2;\n    isLost: boolean = false;\n    isPaused: boolean = false;\n    score: number = 0;\n\n    pool_floatingScore: Node[] = [];\n\n    onLoad() {\n\r\n        GameController.Instance = this;\n\n        resources.load(\"FloatingNumber\", Prefab, (err, prefab) => {\r\n            this.floatingNumber = prefab;\r\n            for (var i = 0; i < 20; i++) {\r\n                this.pool_floatingScore.push(instantiate(this.floatingNumber));\r\n                this.pool_floatingScore[i].active = false;\r\n                this.pool_floatingScore[i].setParent(this.node.parent);\r\n            }\r\n        });\n\n        this.scoreLabel = find(\"Canvas/Score\").getComponent(Label);\n        if (sys.localStorage.getItem('bestScore') == null) {\r\n            sys.localStorage.setItem('bestScore', '0');\n        }\n        window.sessionStorage.setItem('score', '0');\n        this.scoreLabel.string = \"Score: \" + this.score + \"\\nBest Score: \" + parseInt(sys.localStorage.getItem('bestScore'));\n\n        this.timerBar = find(\"Canvas/Timer\").getComponent(ProgressBar);\n        this.timer = this.maxTime;\n\n        this.node.on(Node.EventType.TOUCH_START, (event: any) => {\n            this.touchInput = event.getUILocation();\n\n            if (this.isLost || this.isPaused) return;\r\n\n            if (this.touchInput.x < 1080 / 2) {\r\n                this.playerMovement.chopLeft();\r\n            }\r\n            else {\r\n                this.playerMovement.chopRight();\r\n            }\n        }, this);\n\n        if (window.sessionStorage.getItem('showInstruction') == null) {\r\n            window.sessionStorage.setItem('showInstruction', 'showed');\n            this.isPaused = true;\n            this.timerBar.node.active = false;\r\n            let node = find(\"Canvas/Instruction\");\r\n            node.active = true;\r\n\r\n            this.scheduleOnce(() => {\n                node.active = false;\r\n                this.timerBar.node.active = true;\r\n                this.isPaused = false;\r\n            }, 2);\r\n        }\r\n    }\n\n    lose() {\n        this.isLost = true;\n        if (this.score > parseInt(sys.localStorage.getItem('bestScore'))) {\r\n            this.scoreLabel.string = \"Score: \" + this.score + \"\\nBest Score: \" + this.score;\n            sys.localStorage.setItem('bestScore', this.score.toString());\n        }\n\n        this.scheduleOnce(() => {\r\n            director.loadScene(\"scene\");\r\n\r\n        }, 2);\r\n    }\n\n    addScore(score: number) {\n        this.score += score;\r\n        let bestScore = parseInt(sys.localStorage.getItem('bestScore'));\r\n        this.scoreLabel.string = \"Score: \" + this.score + \"\\nBest Score: \" + (this.score > bestScore ? this.score : bestScore);\n\n        let floatingScore = this.findActiveFloatingScore();\n        let label = floatingScore.getComponent(Label);\n        let rigidBody2D = floatingScore.getComponent(RigidBody2D);\n\n        floatingScore.setPosition(0, -400, 0);\n        label.string = \"+\" + score;\n        label.fontSize = 50 + score * 3;\n        //label.color = Color.RED;\n        rigidBody2D.applyForceToCenter(new Vec2(randomRange(-1, 1) * 500, randomRange(1000, 1500)), true);\n        this.scheduleOnce(() => {\n            floatingScore.active = false;\r\n            rigidBody2D.linearVelocity = Vec2.ZERO;\n        }, 1);\n    }\n\n    findActiveFloatingScore(): Node {\n        for (var i = 0; i < this.pool_floatingScore.length; i++) {\r\n            if (!this.pool_floatingScore[i].active) { this.pool_floatingScore[i].active = true; return this.pool_floatingScore[i]; }\r\n        }\r\n    }\n\n    resetBestScore() {\n        sys.localStorage.setItem('bestScore', '0');\r\n        this.scoreLabel.string = \"Score: \" + this.score + \"\\nBest Score: 0\";\r\n    }\n\n    update(deltaTime: number) {\n        if (this.isPaused) return;\n\n        this.timerBar.progress = this.timer / this.maxTime;\n\n        if (this.timer <= 0 && !this.isLost) {\r\n            this.playerMovement.knockAway();\r\n            this.lose();\r\n        }\n        else {\n            this.timer -= deltaTime;\n        }\r\n    }\n\n}\n\n/**\n * [1] Class member could be defined like this.\n * [2] Use `property` decorator if your want the member to be serializable.\n * [3] Your initialization goes here.\n * [4] Your update function goes here.\n *\n * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/\n * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html\n */\n"]}